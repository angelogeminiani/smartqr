/*!
 * SmartForge - settings
 * Copyright(c) 2011 Gian Angelo Geminiani
 * MIT Licensed
 */

/**
 * Settings.
 * Read all files, directories and subdirectories in path (see 'options.path')
 * and creates a stucture accessible via standard object properties.
 * All json files are parsed and deserialized.
 *
 * Examples
 *
 * // directories: /path1/path2/myfile.json
 * settingInstance.path1.path2.myfile; // return object content of myfile.json.
 **/


/**
 * Module Dependencies.
 */
var application = require('../application')
    utils = require('../utils.js')
    ,utilsFs = require('../utilsFs.js')
    ;

// --------------------------------------------------------------------------------------------------------------
//                              public
// --------------------------------------------------------------------------------------------------------------

/**
 *
 * @param options {object}
 *      - path {string}: path of settings root folder. i.e. /myapp/_workspace/settings
 *      - callback{function}: Optional callback function for Async usage.
 */
function Settings(options){
    var self = this;

    if(options && options.path){
        self._root = options.path;

        init(self, options.callback);
    }
}

Settings.prototype.get = function(name){
    if(name){
        return this[name];
    }
    return null;
}

// --------------------------------------------------------------------------------------------------------------
//                              private
// --------------------------------------------------------------------------------------------------------------

function init(self, opt_callback){
    if(opt_callback){
        loadAsync(self, opt_callback);
    } else {
        loadSync(self, null, null);
    }
}

function loadAsync(self, path, callback){
    utils.defer(function(){
        loadSync(self, null, null);
        if(utils.isFunction(callback)){
            callback.call(self, self);
        }
    });
}

function loadSync(self, parent, path){
    try{
        var root = self._root,
            dir = utilsFs.pathJoin(root, parent, path),
            result = utilsFs.readdirSync(dir, true);
        if(result && result.length>0){
            for(var i=0;i<result.length;i++){
                var fullpath = utilsFs.pathJoin(dir, result[i]);
                if (utilsFs.pathExtName(fullpath)==='.json'){
                    addObjectSync(self, dir, result[i]);
                }
            }
        }
    } catch(err){
        application.error(err);
    }
}

function addObjectSync(self, root, path){
    try{
        var fullpath = utilsFs.pathJoin(root, path);
        obj = utilsFs.readJSONSync(fullpath),
            name = path.replace('.json', ''),
            tokens = utilsFs.pathTokenize(name);
        // add raw path as single property. i.e. 'path1/path2/file'
        self[name] = obj;
        // add cascade properties
        var instance = null;
        for(var i=0;i<tokens.length;i++){
            var token = tokens[i];
            if(instance){
                if(!instance[token]){
                    instance[token] = (i===tokens.length-1)?obj:{};
                }
                instance = instance[token];
            } else {
                if(!self[token]){
                    self[token] = (i===tokens.length-1)?obj:{};
                }
                instance = self[token];
            }
        }
    }catch(err){
        application.error(err);
    }
}

// --------------------------------------------------------------------------------------------------------------
//                              exports
// --------------------------------------------------------------------------------------------------------------

exports.Settings = Settings;

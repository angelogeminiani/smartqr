(function(window, SF, $, undefined) {

    // check namespace history
    if(!SF.history) SF.history={};

    var ns = SF.history,
    hcookies_name = "hcookies", hcookie_name="hcookie",
    hcookies = function(){
        try{
            var s = SF.cookies.getOrCreate(hcookies_name, 0);
            return parseInt(s);
        }catch(err){
            return 0;
        }
        
    },
    getCurrentUrl = function (){
        var url = SF.uri.current();
        return url.attr.fullpath;
    },
    store = function (count, url){
        // inc cookie counter
        if(SF.isNumber(count)){
            SF.cookies.set(hcookies_name, count+1, 0);
            // add new cookie url
            if(url){
                SF.cookies.set(hcookie_name+"_"+count, url, 0);
            }
        }
    },
    remove = function (count, uriCookie){
        if(SF.isNumber(count)){
            SF.cookies.set(hcookies_name, count-1, 0);
            if(uriCookie){
                SF.cookies.remove(uriCookie.name);
            }
        }
    },
    enter = function() {
        var url = getCurrentUrl(),
        uris = SF.cookies.find({
            name:hcookie_name+"_", 
            value:url
        }),
        count = hcookies();
        // add only if does not exists   
        if(uris.length==0){
            store(count, url);
        }
    },
    exit = function(currentPath) {
        var url = currentPath?currentPath:getCurrentUrl(),
        uris = SF.cookies.find({
            name:hcookie_name+"_", 
            value:url
        }),
        count = hcookies();
        // remove only if exists   
        if(uris.length>0){
            remove(count, uris[0]);
        }
    };

    ns.initialLength = (function(){
        return parseInt(hcookies());
    })();
    /**
     * Initializes history
     */
    ns.init = function () {
        // add current uri to history
        enter();
    // add listener to unload
    //$(window).unload(exit);
    }
    ns.length = function(){
        return parseInt(hcookies());
    };
    ns.canGoBack = function(){
        var uriCookies = SF.cookies.find({
            name:hcookie_name+"_"
        }),
        uriCookie;
        if(uriCookies.length>0){
            uriCookie = SF.getFromLast(uriCookies, 2);
            return uriCookie ? !(uriCookie.value==getCurrentUrl):false;
        }
        return false;
    };
    ns.back = function(){
        var count, uriCookies, uriCookie;
        count = parseInt(hcookies());
        if(count>0){
            uriCookies = SF.cookies.find({
                name: hcookie_name+"_",
                sort: function(a,b){
                    var valA = parseInt(a.name.split("_")[1]), 
                    valB = parseInt(b.name.split("_")[1]);
                    return valA-valB;
                }
            });
            uriCookie = SF.getFromLast(uriCookies, 2);
            if(uriCookie){
                exit();
                window.location = uriCookie.value;
                return;
            }
        } 
        // back using browser history
        if(window.history){
            window.history.back();
        }
    };


    // ------------------------------------------------------------------------
    //                      Scroll History
    // ------------------------------------------------------------------------

    /**
     *
     */
    ns.ScrollHistory = function() {
        var self = this,
            history = new SF.HashMap();

        // Add an element to internal map
        // @param elem The element
        self.add = function (elem) {
            try{
                if(elem === window){
                    history.put(elem, {
                        x:window.scrollX||0,
                        y:window.scrollY||0
                    });
                } else {
                    history.put(elem, {
                        x:ns.scrollWidth(elem),
                        y:ns.scrollHeight(elem)
                    });
                }
            }catch(err){
                SF.error(err);
            }
        }

        self.back = function() {
            try {
                var count = history.size(),
                    i, item;
                // scroll back items
                for(i=0; i<count; i++){
                    item = history.getAt(i);
                    if(item.key === window){
                        window.scrollTo(item.value.x, item.value.y);
                    } else {
                        $(item.key).scrollLeft(item.value.x);
                        $(item.key).scrollTop(item.value.y);
                    }
                }
                // reset history
                history.clear();
            }catch(err){
                SF.error(err);
            }
        };
    };


})(window, smartforge, jQuery);
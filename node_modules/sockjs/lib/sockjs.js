(function () {
    var App, DeprecatedConnectionWrapper, DeprecatedServerWrapper, Listener, Server, chunking_test, events, fs, generate_dispatcher, iframe, sockjsVersion, trans_eventsource, trans_htmlfile, trans_jsonp, trans_websocket, trans_xhr, utils, webjs;
    var __hasProp = Object.prototype.hasOwnProperty, __extends = function (child, parent) {
        for (var key in parent) {
            if (__hasProp.call(parent, key)) child[key] = parent[key];
        }
        function ctor() {
            this.constructor = child;
        }

        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child;
    }, __bind = function (fn, me) {
        return function () {
            return fn.apply(me, arguments);
        };
    };
    events = require('events');
    fs = require('fs');
    webjs = require('./webjs');
    utils = require('./utils');
    trans_websocket = require('./trans-websocket');
    trans_jsonp = require('./trans-jsonp');
    trans_xhr = require('./trans-xhr');
    iframe = require('./iframe');
    trans_eventsource = require('./trans-eventsource');
    trans_htmlfile = require('./trans-htmlfile');
    chunking_test = require('./chunking-test');
    sockjsVersion = function () {
        var package;
        try {
            package = fs.readFileSync(__dirname + '/../package.json', 'utf-8');
        } catch (x) {

        }
        if (package) {
            return JSON.parse(package).version;
        } else {
            return null;
        }
    };
    App = (function () {
        __extends(App, webjs.GenericApp);
        function App() {
            App.__super__.constructor.apply(this, arguments);
        }

        App.prototype.welcome_screen = function (req, res) {
            res.setHeader('content-type', 'text/plain; charset=UTF-8');
            res.writeHead(200);
            res.end("Welcome to SockJS!\n");
            return true;
        };
        App.prototype.handle_404 = function (req, res) {
            res.setHeader('content-type', 'text/plain; charset=UTF-8');
            res.writeHead(404);
            res.end('404 Error: Page not found\n');
            return true;
        };
        App.prototype.disabled_transport = function (req, res, data) {
            return this.handle_404(req, res, data);
        };
        App.prototype.h_sid = function (req, res, data) {
            var jsid;
            req.cookies = utils.parseCookie(req.headers.cookie);
            if (typeof this.options.jsessionid === 'function') {
                this.options.jsessionid(req, res);
            } else if (this.options.jsessionid && res.setHeader) {
                jsid = req.cookies['JSESSIONID'] || 'dummy';
                res.setHeader('Set-Cookie', 'JSESSIONID=' + jsid + '; path=/');
            }
            return data;
        };
        App.prototype.log = function (severity, line) {
            return this.options.log(severity, line);
        };
        return App;
    })();
    utils.objectExtend(App.prototype, iframe.app);
    utils.objectExtend(App.prototype, chunking_test.app);
    utils.objectExtend(App.prototype, trans_websocket.app);
    utils.objectExtend(App.prototype, trans_jsonp.app);
    utils.objectExtend(App.prototype, trans_xhr.app);
    utils.objectExtend(App.prototype, trans_eventsource.app);
    utils.objectExtend(App.prototype, trans_htmlfile.app);
    generate_dispatcher = function (options) {
        var dispatcher, maybe_add_transport, opts_filters, p, t;
        p = __bind(function (s) {
            return new RegExp('^' + options.prefix + s + '[/]?$');
        }, this);
        t = __bind(function (s) {
            return [p('/([^/.]+)/([^/.]+)' + s), 'server', 'session'];
        }, this);
        opts_filters = ['h_sid', 'xhr_cors', 'cache_for', 'xhr_options', 'expose'];
        dispatcher = [
            ['GET', p(''), ['welcome_screen']],
            ['GET', p('/iframe[0-9-.a-z_]*.html'), ['iframe', 'cache_for', 'expose']],
            ['OPTIONS', p('/chunking_test'), opts_filters],
            ['POST', p('/chunking_test'), ['xhr_cors', 'expect_xhr', 'chunking_test']],
            ['GET', t('/jsonp'), ['h_sid', 'h_no_cache', 'jsonp']],
            ['POST', t('/jsonp_send'), ['h_sid', 'expect_form', 'jsonp_send']],
            ['POST', t('/xhr'), ['h_sid', 'xhr_cors', 'xhr_poll']],
            ['OPTIONS', t('/xhr'), opts_filters],
            ['POST', t('/xhr_send'), ['h_sid', 'xhr_cors', 'expect_xhr', 'xhr_send']],
            ['OPTIONS', t('/xhr_send'), opts_filters],
            ['POST', t('/xhr_streaming'), ['h_sid', 'xhr_cors', 'xhr_streaming']],
            ['OPTIONS', t('/xhr_streaming'), opts_filters],
            ['GET', t('/eventsource'), ['h_sid', 'h_no_cache', 'eventsource']],
            ['GET', t('/htmlfile'), ['h_sid', 'h_no_cache', 'htmlfile']]
        ];
        maybe_add_transport = __bind(function (name, urls) {
            var filters, method, url;
            if (options.disabled_transports.indexOf(name) !== -1) {
                urls = (function () {
                    var _i, _len, _ref, _results;
                    _results = [];
                    for (_i = 0, _len = urls.length; _i < _len; _i++) {
                        url = urls[_i];
                        _ref = url, method = _ref[0], url = _ref[1], filters = _ref[2];
                        _results.push([method, url, ['cache_for', 'disabled_transport']]);
                    }
                    return _results;
                })();
            }
            return dispatcher = dispatcher.concat(urls);
        }, this);
        return maybe_add_transport('websocket', [
            ['GET', t('/websocket'), ['websocket']]
        ]);
    };
    Listener = (function () {
        function Listener(options, emit) {
            this.options = options;
            this.handler = __bind(this.handler, this);
            this.app = new App();
            this.app.options = options;
            this.app.emit = emit;
            this.app.log('debug', 'SockJS v' + sockjsVersion() + ' ' + 'bound to ' + JSON.stringify(options.prefix));
            this.dispatcher = generate_dispatcher(this.options);
            this.webjs_handler = webjs.generateHandler(this.app, this.dispatcher);
            this.path_regexp = new RegExp('^' + this.options.prefix + '([/].+|[/]?)$');
        }

        Listener.prototype.handler = function (req, res, extra) {
            if (!req.url.match(this.path_regexp)) {
                return false;
            }
            this.webjs_handler(req, res, extra);
            return true;
        };
        Listener.prototype.getHandler = function () {
            return __bind(function (a, b, c) {
                return this.handler(a, b, c);
            }, this);
        };
        return Listener;
    })();
    Server = (function () {
        __extends(Server, events.EventEmitter);
        function Server(user_options) {
            this.options = {
                prefix:'',
                response_limit:128 * 1024,
                origins:['*:*'],
                disabled_transports:[],
                jsessionid:true,
                heartbeat_delay:25000,
                disconnect_delay:5000,
                log:function (severity, line) {
                    return console.log(line);
                },
                sockjs_url:'http://cdn.sockjs.org/sockjs-0.1.min.js'
            };
            if (user_options) {
                utils.objectExtend(this.options, user_options);
            }
        }

        Server.prototype.installHandlers = function (http_server, handler_options) {
            var h, handler, options;
            options = utils.objectExtend({}, this.options);
            if (handler_options) {
                utils.objectExtend(options, handler_options);
            }
            h = new Listener(options, __bind(function () {
                return this.emit.apply(this, arguments);
            }, this));
            handler = h.getHandler();
            utils.overshadowListeners(http_server, 'request', handler);
            utils.overshadowListeners(http_server, 'upgrade', handler);
            return true;
        };
        return Server;
    })();
    exports.createServer = function (options) {
        return new Server(options);
    };
    exports.listen = function (http_server, options) {
        var srv;
        srv = exports.createServer(options);
        if (http_server) {
            srv.installHandlers(http_server);
        }
        return srv;
    };
    DeprecatedConnectionWrapper = (function () {
        __extends(DeprecatedConnectionWrapper, events.EventEmitter);
        function DeprecatedConnectionWrapper(conn) {
            this.conn = conn;
            this.id = this.conn.id;
            this.conn.on('data', __bind(function (message) {
                return this.emit('message', {
                    data:message
                });
            }, this));
            this.conn.on('close', __bind(function () {
                var e;
                e = {
                    status:1001,
                    reason:'Session timed out',
                    wasClean:false
                };
                return this.emit('close', e);
            }, this));
        }

        DeprecatedConnectionWrapper.prototype.send = function (m) {
            return this.conn.write(m);
        };
        DeprecatedConnectionWrapper.prototype.close = function (a, b) {
            return this.conn.close(a, b);
        };
        DeprecatedConnectionWrapper.prototype.toString = function () {
            return this.conn.toString();
        };
        return DeprecatedConnectionWrapper;
    })();
    DeprecatedConnectionWrapper.prototype.__defineGetter__('readyState', function () {
        if (this.conn.readable) {
            return 1;
        } else {
            return 3;
        }
    });
    DeprecatedServerWrapper = (function () {
        __extends(DeprecatedServerWrapper, events.EventEmitter);
        function DeprecatedServerWrapper(options) {
            this.srv = new Server(options);
        }

        DeprecatedServerWrapper.prototype.installHandlers = function (http_server, handler_options) {
            this.srv.options.log('info', 'You\'re using deprecated API, shame on you.');
            this.srv.on('connection', __bind(function (conn) {
                var wrapped_conn;
                wrapped_conn = new DeprecatedConnectionWrapper(conn);
                return this.emit('open', wrapped_conn);
            }, this));
            return this.srv.installHandlers(http_server, handler_options);
        };
        return DeprecatedServerWrapper;
    })();
    exports.Server = DeprecatedServerWrapper;
}).call(this);
